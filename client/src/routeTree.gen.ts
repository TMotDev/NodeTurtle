/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as NotfoundImport } from './routes/notfound'
import { Route as LoginImport } from './routes/login'
import { Route as CreateImport } from './routes/create'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsIndexImport } from './routes/projects/index'
import { Route as ResetTokenImport } from './routes/reset/$token'
import { Route as ProjectsExploreImport } from './routes/projects/explore'
import { Route as ProjectsCreateImport } from './routes/projects/create'
import { Route as ProjectsProjectIDImport } from './routes/projects/$projectID'
import { Route as DeactivateTokenImport } from './routes/deactivate/$token'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminProjectsImport } from './routes/admin/projects'
import { Route as ActivateTokenImport } from './routes/activate/$token'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const NotfoundRoute = NotfoundImport.update({
  id: '/notfound',
  path: '/notfound',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const ResetTokenRoute = ResetTokenImport.update({
  id: '/reset/$token',
  path: '/reset/$token',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsExploreRoute = ProjectsExploreImport.update({
  id: '/projects/explore',
  path: '/projects/explore',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsCreateRoute = ProjectsCreateImport.update({
  id: '/projects/create',
  path: '/projects/create',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIDRoute = ProjectsProjectIDImport.update({
  id: '/projects/$projectID',
  path: '/projects/$projectID',
  getParentRoute: () => rootRoute,
} as any)

const DeactivateTokenRoute = DeactivateTokenImport.update({
  id: '/deactivate/$token',
  path: '/deactivate/$token',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/admin/users',
  path: '/admin/users',
  getParentRoute: () => rootRoute,
} as any)

const AdminProjectsRoute = AdminProjectsImport.update({
  id: '/admin/projects',
  path: '/admin/projects',
  getParentRoute: () => rootRoute,
} as any)

const ActivateTokenRoute = ActivateTokenImport.update({
  id: '/activate/$token',
  path: '/activate/$token',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/notfound': {
      id: '/notfound'
      path: '/notfound'
      fullPath: '/notfound'
      preLoaderRoute: typeof NotfoundImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/activate/$token': {
      id: '/activate/$token'
      path: '/activate/$token'
      fullPath: '/activate/$token'
      preLoaderRoute: typeof ActivateTokenImport
      parentRoute: typeof rootRoute
    }
    '/admin/projects': {
      id: '/admin/projects'
      path: '/admin/projects'
      fullPath: '/admin/projects'
      preLoaderRoute: typeof AdminProjectsImport
      parentRoute: typeof rootRoute
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof rootRoute
    }
    '/deactivate/$token': {
      id: '/deactivate/$token'
      path: '/deactivate/$token'
      fullPath: '/deactivate/$token'
      preLoaderRoute: typeof DeactivateTokenImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectID': {
      id: '/projects/$projectID'
      path: '/projects/$projectID'
      fullPath: '/projects/$projectID'
      preLoaderRoute: typeof ProjectsProjectIDImport
      parentRoute: typeof rootRoute
    }
    '/projects/create': {
      id: '/projects/create'
      path: '/projects/create'
      fullPath: '/projects/create'
      preLoaderRoute: typeof ProjectsCreateImport
      parentRoute: typeof rootRoute
    }
    '/projects/explore': {
      id: '/projects/explore'
      path: '/projects/explore'
      fullPath: '/projects/explore'
      preLoaderRoute: typeof ProjectsExploreImport
      parentRoute: typeof rootRoute
    }
    '/reset/$token': {
      id: '/reset/$token'
      path: '/reset/$token'
      fullPath: '/reset/$token'
      preLoaderRoute: typeof ResetTokenImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/login': typeof LoginRoute
  '/notfound': typeof NotfoundRoute
  '/register': typeof RegisterRoute
  '/activate/$token': typeof ActivateTokenRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/users': typeof AdminUsersRoute
  '/deactivate/$token': typeof DeactivateTokenRoute
  '/projects/$projectID': typeof ProjectsProjectIDRoute
  '/projects/create': typeof ProjectsCreateRoute
  '/projects/explore': typeof ProjectsExploreRoute
  '/reset/$token': typeof ResetTokenRoute
  '/projects': typeof ProjectsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/login': typeof LoginRoute
  '/notfound': typeof NotfoundRoute
  '/register': typeof RegisterRoute
  '/activate/$token': typeof ActivateTokenRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/users': typeof AdminUsersRoute
  '/deactivate/$token': typeof DeactivateTokenRoute
  '/projects/$projectID': typeof ProjectsProjectIDRoute
  '/projects/create': typeof ProjectsCreateRoute
  '/projects/explore': typeof ProjectsExploreRoute
  '/reset/$token': typeof ResetTokenRoute
  '/projects': typeof ProjectsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/create': typeof CreateRoute
  '/login': typeof LoginRoute
  '/notfound': typeof NotfoundRoute
  '/register': typeof RegisterRoute
  '/activate/$token': typeof ActivateTokenRoute
  '/admin/projects': typeof AdminProjectsRoute
  '/admin/users': typeof AdminUsersRoute
  '/deactivate/$token': typeof DeactivateTokenRoute
  '/projects/$projectID': typeof ProjectsProjectIDRoute
  '/projects/create': typeof ProjectsCreateRoute
  '/projects/explore': typeof ProjectsExploreRoute
  '/reset/$token': typeof ResetTokenRoute
  '/projects/': typeof ProjectsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create'
    | '/login'
    | '/notfound'
    | '/register'
    | '/activate/$token'
    | '/admin/projects'
    | '/admin/users'
    | '/deactivate/$token'
    | '/projects/$projectID'
    | '/projects/create'
    | '/projects/explore'
    | '/reset/$token'
    | '/projects'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create'
    | '/login'
    | '/notfound'
    | '/register'
    | '/activate/$token'
    | '/admin/projects'
    | '/admin/users'
    | '/deactivate/$token'
    | '/projects/$projectID'
    | '/projects/create'
    | '/projects/explore'
    | '/reset/$token'
    | '/projects'
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/login'
    | '/notfound'
    | '/register'
    | '/activate/$token'
    | '/admin/projects'
    | '/admin/users'
    | '/deactivate/$token'
    | '/projects/$projectID'
    | '/projects/create'
    | '/projects/explore'
    | '/reset/$token'
    | '/projects/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreateRoute: typeof CreateRoute
  LoginRoute: typeof LoginRoute
  NotfoundRoute: typeof NotfoundRoute
  RegisterRoute: typeof RegisterRoute
  ActivateTokenRoute: typeof ActivateTokenRoute
  AdminProjectsRoute: typeof AdminProjectsRoute
  AdminUsersRoute: typeof AdminUsersRoute
  DeactivateTokenRoute: typeof DeactivateTokenRoute
  ProjectsProjectIDRoute: typeof ProjectsProjectIDRoute
  ProjectsCreateRoute: typeof ProjectsCreateRoute
  ProjectsExploreRoute: typeof ProjectsExploreRoute
  ResetTokenRoute: typeof ResetTokenRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  LoginRoute: LoginRoute,
  NotfoundRoute: NotfoundRoute,
  RegisterRoute: RegisterRoute,
  ActivateTokenRoute: ActivateTokenRoute,
  AdminProjectsRoute: AdminProjectsRoute,
  AdminUsersRoute: AdminUsersRoute,
  DeactivateTokenRoute: DeactivateTokenRoute,
  ProjectsProjectIDRoute: ProjectsProjectIDRoute,
  ProjectsCreateRoute: ProjectsCreateRoute,
  ProjectsExploreRoute: ProjectsExploreRoute,
  ResetTokenRoute: ResetTokenRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/create",
        "/login",
        "/notfound",
        "/register",
        "/activate/$token",
        "/admin/projects",
        "/admin/users",
        "/deactivate/$token",
        "/projects/$projectID",
        "/projects/create",
        "/projects/explore",
        "/reset/$token",
        "/projects/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/notfound": {
      "filePath": "notfound.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/activate/$token": {
      "filePath": "activate/$token.tsx"
    },
    "/admin/projects": {
      "filePath": "admin/projects.tsx"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx"
    },
    "/deactivate/$token": {
      "filePath": "deactivate/$token.tsx"
    },
    "/projects/$projectID": {
      "filePath": "projects/$projectID.tsx"
    },
    "/projects/create": {
      "filePath": "projects/create.tsx"
    },
    "/projects/explore": {
      "filePath": "projects/explore.tsx"
    },
    "/reset/$token": {
      "filePath": "reset/$token.tsx"
    },
    "/projects/": {
      "filePath": "projects/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
