basePath: /api
definitions:
  NodeTurtleAPI_internal_models.PasswordChange:
    description: Data required to change a user's password
    properties:
      new_password:
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  NodeTurtleAPI_internal_models.PasswordReset:
    description: Email required to request a password reset
    properties:
      email:
        type: string
    required:
    - email
    type: object
  NodeTurtleAPI_internal_models.Role:
    description: User role information including permissions and timestamps
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  NodeTurtleAPI_internal_models.User:
    description: Complete user account information including role and status
    properties:
      active:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      last_login:
        $ref: '#/definitions/sql.NullTime'
      role:
        $ref: '#/definitions/NodeTurtleAPI_internal_models.Role'
      updated_at:
        type: string
      username:
        type: string
    type: object
  NodeTurtleAPI_internal_models.UserLogin:
    description: Data required to login a user
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  NodeTurtleAPI_internal_models.UserRegistration:
    description: Data required to register a new user account
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
  sql.NullTime:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: API documentation for NodeTurtle service
  title: NodeTurtle API
  version: "1.0"
paths:
  /activate/{token}:
    get:
      consumes:
      - application/json
      description: Activate a user account with the token sent via email
      parameters:
      - description: Activation Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Account activated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid token
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Activate user account
      tags:
      - auth
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all users (admin only)
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Results per page (default: 10)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users with pagination metadata
          schema:
            properties:
              meta:
                properties:
                  limit:
                    type: integer
                  page:
                    type: integer
                  total:
                    type: integer
                type: object
              users:
                items:
                  $ref: '#/definitions/NodeTurtleAPI_internal_models.User'
                type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - Admin role required
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - admin
      - users
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - Admin role required
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - admin
      - users
    get:
      consumes:
      - application/json
      description: Get a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/NodeTurtleAPI_internal_models.User'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - Admin role required
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - admin
      - users
    put:
      consumes:
      - application/json
      description: Update a specific user by their ID (admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Data
        in: body
        name: userData
        required: true
        schema:
          properties:
            active:
              type: boolean
            email:
              type: string
            role_id:
              type: integer
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden - Admin role required
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - admin
      - users
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT token
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/NodeTurtleAPI_internal_models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Account not activated
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Login user
      tags:
      - auth
  /password/reset:
    post:
      consumes:
      - application/json
      description: Request a password reset email
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/NodeTurtleAPI_internal_models.PasswordReset'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset email sent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Request password reset
      tags:
      - auth
  /password/reset/{token}:
    post:
      consumes:
      - application/json
      description: Reset user password with token
      parameters:
      - description: Reset Token
        in: path
        name: token
        required: true
        type: string
      - description: New Password
        in: body
        name: password
        required: true
        schema:
          properties:
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid token or password
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Reset password
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user account with email verification
      parameters:
      - description: User Registration Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/NodeTurtleAPI_internal_models.UserRegistration'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Register a new user
      tags:
      - auth
  /users/me:
    get:
      consumes:
      - application/json
      description: Get information about the currently logged in user
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/NodeTurtleAPI_internal_models.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update profile information for the currently logged in user
      parameters:
      - description: User Data
        in: body
        name: userData
        required: true
        schema:
          properties:
            email:
              type: string
            username:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update current user
      tags:
      - users
  /users/me/password:
    post:
      consumes:
      - application/json
      description: Change password for the currently logged in user
      parameters:
      - description: Password Change
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/NodeTurtleAPI_internal_models.PasswordChange'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request or incorrect current password
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
